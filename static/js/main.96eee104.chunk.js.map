{"version":3,"sources":["StyledButton.js","FlagChoices.js","FlagAnswer.js","FlagQuestion.js","CountryGame.js","App.js","serviceWorker.js","index.js"],"names":["StyledButton","_ref","text","onClick","type","react_default","a","createElement","style","backgroundColor","borderRadius","border","color","padding","textAlign","textDecoration","fontSize","FlagChoices","props","options","handleChange","handleSubmit","inputs","map","opt","className","key","id","value","checked","onChange","name","onSubmit","src_StyledButton","FlagAnswer","correct","answer","onNext","concat","QuestionStates","FlagQuestion","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","userChoice","undefined","bind","assertThisInitialized","e","setState","Number","target","preventDefault","onGuess","_this$props","flag","questionState","answerText","opts","objectSpread","output","src_FlagChoices_0","src_FlagAnswer_0","src","alt","Component","defaultProps","CountryGame","countries","correctOption","nextQuestion","_this2","fetch","then","resp","json","Math","floor","random","length","_getOptions","catch","console","warn","tries","option","indexOf","push","shuffle","_this$state","fontWeight","_countries$correctOpt","src_FlagQuestion_0","marginTop","App","src_CountryGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96eee104.chunk.js","sourcesContent":["import React from 'react';\n\nconst StyledButton = ({text, onClick, type}) => (\n  <button\n    type={type || 'button'}\n    onClick={onClick}\n    style={{\n      backgroundColor: \"#6b93d6\",\n      borderRadius: \"4px\",\n      border: \"none\",\n      color: \"white\",\n      padding: \"4px 10px\",\n      textAlign: \"center\",\n      textDecoration: \"none\",\n      fontSize: \"1em\",\n    }}\n  >\n    {text}\n  </button>\n);\n\nexport default StyledButton;","import React from 'react';\nimport StyledButton from './StyledButton';\nimport './FlagChoices.css';\n\nconst FlagChoices =  props => {\n  let options = props.options || []\n  const {handleChange, handleSubmit} = props;\n  let inputs = options.map(opt => (\n    <label className=\"lb\" key={opt.id}>\n      <input type=\"radio\"\n             value={opt.id}\n             checked={opt.checked}\n             onChange={handleChange}\n             name=\"flag-choice\" />\n      {opt.name}\n    </label>\n  ));\n\n  return (\n    <form className=\"flag-form\" onSubmit={handleSubmit}>\n      {inputs}\n      <StyledButton text=\"GUESS\" type=\"submit\"/>\n    </form>\n  );\n}\n\nexport default FlagChoices;","import React from 'react';\nimport StyledButton from './StyledButton';\nimport './FlagAnswer.css';\n\nconst FlagAnswer = ({correct, answer, onNext}) => (\n  <div className='flag-answer'>\n    {correct ?\n      `Correct!: ${answer}` :\n      `Incorrect! Correct Answer: ${answer}`}\n    <StyledButton text=\"NEXT\" onClick={onNext} />\n  </div>\n);\n\nexport default FlagAnswer;","import React, {Component} from 'react';\nimport FlagChoices from './FlagChoices'\nimport FlagAnswer from './FlagAnswer';\nimport './FlagQuestion.css';\n\nconst QuestionStates = {\n  QUESTION: 1,\n  ANSWER_WRONG: 2,\n  ANSWER_CORRECT: 3\n};\n\n\nclass FlagQuestion extends Component {\n  static defaultProps = {\n    options: []\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userChoice: undefined,\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({userChoice: Number(e.target.value)});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onGuess(this.state.userChoice);\n  }\n\n  render() {\n    const {\n      flag,\n      questionState,\n      options,\n      answerText,\n      onNext\n    } = this.props;\n    const {userChoice} = this.state;\n    let opts = options.map(opt => ({\n      ...opt,\n      checked: userChoice === opt.id\n    }));\n    let output = questionState === QuestionStates.QUESTION ?\n      (<FlagChoices handleChange={this.handleChange}\n                   handleSubmit={this.handleSubmit}\n                   options={opts} />) :\n      (<FlagAnswer\n        correct={questionState === QuestionStates.ANSWER_CORRECT}\n        answer={answerText}\n        onNext={onNext} />);\n\n    return (\n      <div>\n        {output}\n        <img\n           className=\"flag-img\"\n           src={flag}\n           alt=\"Guess the flag\"\n         />\n      </div>\n    );\n  }\n}\n\nexport default FlagQuestion;\nexport { QuestionStates };","import React, {Component} from 'react';\nimport FlagQuestion, {QuestionStates} from './FlagQuestion.js';\nimport shuffle from 'shuffle-array';\n\nclass CountryGame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      countries: [],\n      options: [],\n      correctOption: undefined,\n      questionState: undefined,\n    }\n\n    this.onGuess = this.onGuess.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(resp => resp.json())\n      .then(countries => {\n        const correctOption = Math.floor(Math.random() * countries.length);\n        const options = this._getOptions(correctOption, countries);\n        this.setState({\n          countries,\n          correctOption,\n          options,\n          questionState: QuestionStates.QUESTION,\n        });\n      })\n      .catch(console.warn)\n  }\n\n  onGuess(answer) {\n    const {correctOption} = this.state;\n    let questionState = answer === correctOption ?\n                        QuestionStates.ANSWER_CORRECT :\n                        QuestionStates.ANSWER_WRONG;\n    this.setState({questionState});\n  }\n\n  nextQuestion() {\n    const {countries} = this.state;\n    const correctOption = Math.floor(Math.random() * countries.length);\n    const options = this._getOptions(correctOption, countries);\n    this.setState({\n      correctOption,\n      options,\n      questionState: QuestionStates.QUESTION\n    });\n  }\n\n  _getOptions(correctOption, countries) {\n    let options = [correctOption];\n    let tries = 0;\n    while (options.length < 4 && tries < 15) {\n      let option = Math.floor(Math.random() * countries.length);\n      if (options.indexOf(option) === -1 ) {\n        options.push(option);\n      } else {\n        tries++;\n      }\n    }\n    return shuffle(options);\n  }\n\n  render() {\n    let {\n      countries,\n      correctOption,\n      options,\n      questionState\n    } = this.state;\n    let output = <div style={{fontSize:'30px',fontWeight:'700'}}>Loading...</div>;\n    if (correctOption !== undefined) {\n      const {flag, name} = countries[correctOption];\n      let opts = options.map(opt => {\n        return {\n          id: opt,\n          name: countries[opt].name\n        };\n      });\n      output = (\n        <FlagQuestion\n          answerText={name}\n          onGuess={this.onGuess}\n          onNext={this.nextQuestion}\n          options={opts}\n          questionState={questionState}\n          flag={flag}/>\n      );\n    }\n    return (\n      <div style={{marginTop: '15px'}}>\n        {output}\n      </div>\n    );\n  }\n}\n\nexport default CountryGame;","import React, { Component } from 'react';\nimport './App.css';\nimport CountryGame from './CountryGame';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"flag-app\">\n        <header className=\"title-header\">\n          <h1 className=\"title-text\">Guess The Flag</h1>\n        </header>\n        <CountryGame />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}